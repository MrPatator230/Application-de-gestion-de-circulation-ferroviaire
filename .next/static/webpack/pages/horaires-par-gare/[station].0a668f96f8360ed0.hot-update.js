"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/horaires-par-gare/[station]",{

/***/ "(pages-dir-browser)/./utils/scheduleUtils.js":
/*!********************************!*\
  !*** ./utils/scheduleUtils.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addSchedule: () => (/* binding */ addSchedule),\n/* harmony export */   deleteSchedule: () => (/* binding */ deleteSchedule),\n/* harmony export */   getAllSchedules: () => (/* binding */ getAllSchedules),\n/* harmony export */   getFormattedSchedules: () => (/* binding */ getFormattedSchedules),\n/* harmony export */   syncSchedules: () => (/* binding */ syncSchedules),\n/* harmony export */   updateSchedule: () => (/* binding */ updateSchedule)\n/* harmony export */ });\n/* harmony import */ var _dateUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dateUtils */ \"(pages-dir-browser)/./utils/dateUtils.js\");\n/* harmony import */ var _stationUtils_new__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stationUtils.new */ \"(pages-dir-browser)/./utils/stationUtils.new.js\");\n\n\n// Get all schedules from localStorage\nconst getAllSchedules = ()=>{\n    if (false) {}\n    const schedules = JSON.parse(localStorage.getItem('schedules') || '[]');\n    return schedules;\n};\n// Add a new schedule and sync\nconst addSchedule = (schedule)=>{\n    if (false) {}\n    const schedules = getAllSchedules();\n    const newSchedule = {\n        ...schedule,\n        id: \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n        status: 'À l\\'heure',\n        platform: schedule.platform || 'À définir',\n        createdAt: new Date().toISOString()\n    };\n    schedules.push(newSchedule);\n    localStorage.setItem('schedules', JSON.stringify(schedules));\n    // Sync with station utils\n    (0,_stationUtils_new__WEBPACK_IMPORTED_MODULE_1__.updateStationsFromSchedule)(newSchedule);\n    return true;\n};\n// Get formatted schedules for display\nconst getFormattedSchedules = function(stationName) {\n    let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'all', date = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Date();\n    const schedules = getAllSchedules();\n    // Filter schedules for the station\n    const stationSchedules = schedules.filter((schedule)=>{\n        // Check main stations\n        if (schedule.departureStation === stationName || schedule.arrivalStation === stationName) {\n            return true;\n        }\n        // Check served stations\n        if (schedule.servedStations && Array.isArray(schedule.servedStations)) {\n            return schedule.servedStations.some((station)=>(typeof station === 'object' ? station.name : station) === stationName);\n        }\n        return false;\n    });\n    // Filter by day\n    const daySchedules = (0,_dateUtils__WEBPACK_IMPORTED_MODULE_0__.filterSchedulesByDay)(stationSchedules, date);\n    // Filter by type and format for display\n    return daySchedules.map((schedule)=>{\n        var _schedule_servedStations;\n        const isServedStation = (_schedule_servedStations = schedule.servedStations) === null || _schedule_servedStations === void 0 ? void 0 : _schedule_servedStations.some((station)=>(typeof station === 'object' ? station.name : station) === stationName);\n        let scheduleType, time;\n        if (isServedStation) {\n            const servedStation = schedule.servedStations.find((station)=>(typeof station === 'object' ? station.name : station) === stationName);\n            scheduleType = servedStation.departureTime ? 'departure' : 'arrival';\n            time = servedStation.departureTime || servedStation.arrivalTime;\n        } else {\n            scheduleType = schedule.departureStation === stationName ? 'departure' : 'arrival';\n            time = scheduleType === 'departure' ? schedule.departureTime : schedule.arrivalTime;\n        }\n        return {\n            id: schedule.id,\n            type: scheduleType,\n            time: time,\n            destination: schedule.arrivalStation,\n            origin: schedule.departureStation,\n            platform: schedule.platform || 'À définir',\n            train: \"\".concat(schedule.trainType, \" \").concat(schedule.trainNumber),\n            status: schedule.status || 'À l\\'heure',\n            duration: calculateDuration(schedule.departureTime, schedule.arrivalTime)\n        };\n    }).filter((schedule)=>{\n        if (type === 'departures') return schedule.type === 'departure';\n        if (type === 'arrivals') return schedule.type === 'arrival';\n        return true;\n    }).sort((a, b)=>{\n        const timeA = a.time.split(':').map(Number);\n        const timeB = b.time.split(':').map(Number);\n        return timeA[0] * 60 + timeA[1] - (timeB[0] * 60 + timeB[1]);\n    });\n};\n// Update an existing schedule\nconst updateSchedule = (id, updates)=>{\n    if (false) {}\n    const schedules = getAllSchedules();\n    const index = schedules.findIndex((s)=>s.id === id);\n    if (index !== -1) {\n        const updatedSchedule = {\n            ...schedules[index],\n            ...updates\n        };\n        schedules[index] = updatedSchedule;\n        localStorage.setItem('schedules', JSON.stringify(schedules));\n        // Sync with station utils\n        (0,_stationUtils_new__WEBPACK_IMPORTED_MODULE_1__.updateStationsFromSchedule)(updatedSchedule);\n        return true;\n    }\n    return false;\n};\n// Delete a schedule\nconst deleteSchedule = (id)=>{\n    if (false) {}\n    const schedules = getAllSchedules();\n    const filteredSchedules = schedules.filter((s)=>s.id !== id);\n    if (filteredSchedules.length !== schedules.length) {\n        localStorage.setItem('schedules', JSON.stringify(filteredSchedules));\n        return true;\n    }\n    return false;\n};\n// Helper function to calculate duration\nconst calculateDuration = (departureTime, arrivalTime)=>{\n    const [depHours, depMinutes] = departureTime.split(':').map(Number);\n    const [arrHours, arrMinutes] = arrivalTime.split(':').map(Number);\n    const totalDepMinutes = depHours * 60 + depMinutes;\n    const totalArrMinutes = arrHours * 60 + arrMinutes;\n    const diffMinutes = totalArrMinutes - totalDepMinutes;\n    const hours = Math.floor(diffMinutes / 60);\n    const minutes = diffMinutes % 60;\n    return \"\".concat(hours, \"h\").concat(minutes.toString().padStart(2, '0'));\n};\n// Sync schedules with test data\nconst syncSchedules = ()=>{\n    if (false) {}\n    // Get existing schedules\n    const existingSchedules = getAllSchedules();\n    // Add test schedules if none exist\n    if (existingSchedules.length === 0) {\n        const testSchedules = [\n            {\n                id: 'TER123-0915',\n                trainType: 'TER',\n                trainNumber: '123',\n                departureStation: 'Seurre',\n                arrivalStation: 'Dijon Ville',\n                departureTime: '09:15',\n                arrivalTime: '10:15',\n                platform: '2',\n                status: 'À l\\'heure',\n                joursCirculation: [\n                    'Monday',\n                    'Tuesday',\n                    'Wednesday',\n                    'Thursday',\n                    'Friday'\n                ]\n            },\n            {\n                id: 'TER456-1130',\n                trainType: 'TER',\n                trainNumber: '456',\n                departureStation: 'Seurre',\n                arrivalStation: 'Dijon Ville',\n                departureTime: '11:30',\n                arrivalTime: '11:45',\n                platform: '1',\n                status: 'Retard 5min',\n                joursCirculation: [\n                    'Monday',\n                    'Tuesday',\n                    'Wednesday',\n                    'Thursday',\n                    'Friday'\n                ]\n            },\n            {\n                id: 'TGV789-0730',\n                trainType: 'TGV',\n                trainNumber: '789',\n                departureStation: 'Dijon Ville',\n                arrivalStation: 'Paris',\n                departureTime: '07:30',\n                arrivalTime: '09:00',\n                platform: '3',\n                status: 'À l\\'heure',\n                joursCirculation: [\n                    'Monday',\n                    'Tuesday',\n                    'Wednesday',\n                    'Thursday',\n                    'Friday'\n                ]\n            }\n        ];\n        localStorage.setItem('schedules', JSON.stringify(testSchedules));\n        // Sync each test schedule with station utils\n        testSchedules.forEach((schedule)=>{\n            (0,_stationUtils_new__WEBPACK_IMPORTED_MODULE_1__.updateStationsFromSchedule)(schedule);\n        });\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/scheduleUtils.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./utils/stationUtils.new.js":
/*!***********************************!*\
  !*** ./utils/stationUtils.new.js ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addStation: () => (/* binding */ addStation),\n/* harmony export */   deleteStation: () => (/* binding */ deleteStation),\n/* harmony export */   getAllStationNames: () => (/* binding */ getAllStationNames),\n/* harmony export */   getAllStations: () => (/* binding */ getAllStations),\n/* harmony export */   stationExists: () => (/* binding */ stationExists),\n/* harmony export */   updateStation: () => (/* binding */ updateStation),\n/* harmony export */   updateStationsFromSchedule: () => (/* binding */ updateStationsFromSchedule),\n/* harmony export */   updateStationsFromSchedules: () => (/* binding */ updateStationsFromSchedules)\n/* harmony export */ });\n// Fonction pour extraire toutes les gares uniques d'un horaire\nconst extractStationsFromSchedule = (schedule)=>{\n    const stations = new Set();\n    stations.add(schedule.departureStation);\n    stations.add(schedule.arrivalStation);\n    if (schedule.viaStations && Array.isArray(schedule.viaStations)) {\n        schedule.viaStations.forEach((station)=>stations.add(station));\n    }\n    return Array.from(stations);\n};\n// Fonction pour mettre à jour la liste des gares dans localStorage\nconst updateStationsFromSchedule = (schedule)=>{\n    if (false) {}\n    // Récupérer les gares existantes\n    const existingStations = getAllStations();\n    const existingStationNames = new Set(existingStations.map((s)=>s.name));\n    // Extraire les gares de l'horaire\n    const scheduleStations = extractStationsFromSchedule(schedule);\n    // Ajouter les nouvelles gares\n    let hasNewStations = false;\n    scheduleStations.forEach((stationName)=>{\n        if (!existingStationNames.has(stationName)) {\n            existingStations.push({\n                name: stationName,\n                categories: [\n                    'TER'\n                ],\n                createdAt: new Date().toISOString()\n            });\n            hasNewStations = true;\n        }\n    });\n    // Sauvegarder si de nouvelles gares ont été ajoutées\n    if (hasNewStations) {\n        localStorage.setItem('stations', JSON.stringify(existingStations));\n    }\n};\n// Fonction pour mettre à jour la liste des gares à partir de plusieurs horaires\nconst updateStationsFromSchedules = (schedules)=>{\n    if (!Array.isArray(schedules)) return;\n    schedules.forEach((schedule)=>updateStationsFromSchedule(schedule));\n};\n// Fonction pour ajouter une nouvelle gare\nconst addStation = (station)=>{\n    if ( false || !station.name) return false;\n    const existingStations = getAllStations();\n    if (!existingStations.some((s)=>s.name === station.name)) {\n        existingStations.push({\n            ...station,\n            createdAt: new Date().toISOString()\n        });\n        localStorage.setItem('stations', JSON.stringify(existingStations));\n        return true;\n    }\n    return false;\n};\n// Fonction pour récupérer toutes les gares\nconst getAllStations = ()=>{\n    if (false) {}\n    const stations = JSON.parse(localStorage.getItem('stations') || '[]');\n    return stations;\n};\n// Fonction pour récupérer les noms de toutes les gares\nconst getAllStationNames = ()=>{\n    return getAllStations().map((station)=>station.name);\n};\n// Fonction pour vérifier si une gare existe\nconst stationExists = (stationName)=>{\n    if ( false || !stationName) return false;\n    const stations = getAllStations();\n    return stations.some((s)=>s.name === stationName);\n};\n// Fonction pour mettre à jour une gare existante\nconst updateStation = (stationName, updates)=>{\n    if ( false || !stationName) return false;\n    const stations = getAllStations();\n    const index = stations.findIndex((s)=>s.name === stationName);\n    if (index !== -1) {\n        stations[index] = {\n            ...stations[index],\n            ...updates\n        };\n        localStorage.setItem('stations', JSON.stringify(stations));\n        return true;\n    }\n    return false;\n};\n// Fonction pour supprimer une gare\nconst deleteStation = (stationName)=>{\n    if ( false || !stationName) return false;\n    const stations = getAllStations();\n    const filteredStations = stations.filter((s)=>s.name !== stationName);\n    if (filteredStations.length !== stations.length) {\n        localStorage.setItem('stations', JSON.stringify(filteredStations));\n        return true;\n    }\n    return false;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/stationUtils.new.js\n"));

/***/ })

});