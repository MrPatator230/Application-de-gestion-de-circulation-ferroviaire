"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/horaires-par-gare/[station]",{

/***/ "(pages-dir-browser)/./utils/scheduleUtils.js":
/*!********************************!*\
  !*** ./utils/scheduleUtils.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterSchedulesByType: () => (/* binding */ filterSchedulesByType),\n/* harmony export */   formatOperatingDays: () => (/* binding */ formatOperatingDays),\n/* harmony export */   getAllSchedules: () => (/* binding */ getAllSchedules),\n/* harmony export */   getDelayedTime: () => (/* binding */ getDelayedTime),\n/* harmony export */   getStationEndpoint: () => (/* binding */ getStationEndpoint),\n/* harmony export */   getStationSchedules: () => (/* binding */ getStationSchedules),\n/* harmony export */   getStationTime: () => (/* binding */ getStationTime),\n/* harmony export */   getTrainStatus: () => (/* binding */ getTrainStatus),\n/* harmony export */   sortSchedulesByTime: () => (/* binding */ sortSchedulesByTime),\n/* harmony export */   updateSchedule: () => (/* binding */ updateSchedule)\n/* harmony export */ });\n// Fonction pour récupérer tous les horaires\nconst getAllSchedules = ()=>{\n    if (false) {}\n    return JSON.parse(localStorage.getItem('schedules') || '[]');\n};\n// Fonction pour valider un horaire\nconst validateSchedule = (schedule)=>{\n    return schedule && schedule.trainNumber && schedule.departureStation && schedule.arrivalStation && schedule.departureTime && schedule.arrivalTime;\n};\n// Fonction pour normaliser les gares desservies\nconst normalizeServedStations = (servedStations)=>{\n    if (!servedStations) return [];\n    return servedStations.map((station)=>{\n        if (typeof station === 'string') {\n            return {\n                name: station,\n                arrivalTime: null,\n                departureTime: null\n            };\n        }\n        return station;\n    }).filter((station)=>station.name);\n};\n// Fonction pour calculer l'heure retardée\nconst getDelayedTime = (time, delayMinutes)=>{\n    if (!time || !delayMinutes) return time;\n    const [hours, minutes] = time.split(':').map(Number);\n    const totalMinutes = hours * 60 + minutes + delayMinutes;\n    const newHours = Math.floor(totalMinutes / 60) % 24;\n    const newMinutes = totalMinutes % 60;\n    return \"\".concat(String(newHours).padStart(2, '0'), \":\").concat(String(newMinutes).padStart(2, '0'));\n};\n// Fonction pour obtenir le statut du train\nconst getTrainStatus = (schedule)=>{\n    if (schedule.isCancelled) {\n        return {\n            status: 'cancelled',\n            label: 'Train supprimé',\n            className: 'status-cancelled'\n        };\n    }\n    if (schedule.delayMinutes) {\n        return {\n            status: 'delayed',\n            label: \"Retard \".concat(schedule.delayMinutes, \" min\"),\n            className: 'status-delayed',\n            delayedTime: getDelayedTime(schedule.departureTime, schedule.delayMinutes)\n        };\n    }\n    return {\n        status: 'ontime',\n        label: 'À l\\'heure',\n        className: 'status-ontime'\n    };\n};\n// Fonction pour récupérer les horaires d'une gare spécifique\nconst getStationSchedules = (stationName)=>{\n    try {\n        if (!stationName) return [];\n        const schedules = getAllSchedules();\n        const validSchedules = schedules.filter(validateSchedule);\n        return validSchedules.filter((schedule)=>{\n            // Vérifier si la gare est la gare de départ ou d'arrivée\n            if (schedule.departureStation === stationName || schedule.arrivalStation === stationName) {\n                return true;\n            }\n            // Vérifier dans les gares desservies\n            const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n            return normalizedServedStations.some((served)=>served.name === stationName);\n        });\n    } catch (error) {\n        console.error('Erreur lors de la récupération des horaires:', error);\n        return [];\n    }\n};\n// Fonction pour obtenir l'heure de départ ou d'arrivée pour une gare spécifique\nconst getStationTime = function(schedule, stationName) {\n    let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'departure';\n    if (!schedule || !stationName) return null;\n    try {\n        if (type === 'departure') {\n            if (schedule.departureStation === stationName) {\n                return schedule.isCancelled ? schedule.departureTime : schedule.delayMinutes ? getDelayedTime(schedule.departureTime, schedule.delayMinutes) : schedule.departureTime;\n            }\n            const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n            const servedStation = normalizedServedStations.find((s)=>s.name === stationName);\n            return (servedStation === null || servedStation === void 0 ? void 0 : servedStation.departureTime) || null;\n        } else {\n            if (schedule.arrivalStation === stationName) {\n                return schedule.isCancelled ? schedule.arrivalTime : schedule.delayMinutes ? getDelayedTime(schedule.arrivalTime, schedule.delayMinutes) : schedule.arrivalTime;\n            }\n            const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n            const servedStation = normalizedServedStations.find((s)=>s.name === stationName);\n            return (servedStation === null || servedStation === void 0 ? void 0 : servedStation.arrivalTime) || null;\n        }\n    } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'heure:', error);\n        return null;\n    }\n};\n// Fonction pour filtrer les horaires par type (départs ou arrivées)\nconst filterSchedulesByType = function(schedules, stationName) {\n    let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'departures';\n    if (!schedules || !stationName) return [];\n    try {\n        return schedules.filter((schedule)=>{\n            if (!validateSchedule(schedule)) return false;\n            if (type === 'departures') {\n                // Pour les départs, inclure si c'est la gare de départ\n                if (schedule.departureStation === stationName) return true;\n                // Ou si c'est une gare desservie avec une heure de départ\n                const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n                return normalizedServedStations.some((served)=>served.name === stationName && served.departureTime);\n            } else {\n                // Pour les arrivées, inclure si c'est la gare d'arrivée\n                if (schedule.arrivalStation === stationName) return true;\n                // Ou si c'est une gare desservie avec une heure d'arrivée\n                const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n                return normalizedServedStations.some((served)=>served.name === stationName && served.arrivalTime);\n            }\n        });\n    } catch (error) {\n        console.error('Erreur lors du filtrage des horaires:', error);\n        return [];\n    }\n};\n// Fonction pour obtenir la destination ou la provenance d'un train\nconst getStationEndpoint = function(schedule, stationName) {\n    let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'departures';\n    if (!schedule || !stationName) return '';\n    try {\n        if (type === 'departures') {\n            // Pour un départ, la destination est soit la gare d'arrivée,\n            // soit la prochaine gare desservie après la gare actuelle\n            if (schedule.departureStation === stationName) {\n                return schedule.arrivalStation;\n            }\n            const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n            const stationIndex = normalizedServedStations.findIndex((s)=>s.name === stationName);\n            if (stationIndex !== -1 && stationIndex < normalizedServedStations.length - 1) {\n                return normalizedServedStations[stationIndex + 1].name;\n            }\n            return schedule.arrivalStation;\n        } else {\n            // Pour une arrivée, la provenance est soit la gare de départ,\n            // soit la gare desservie précédente\n            if (schedule.arrivalStation === stationName) {\n                return schedule.departureStation;\n            }\n            const normalizedServedStations = normalizeServedStations(schedule.servedStations);\n            const stationIndex = normalizedServedStations.findIndex((s)=>s.name === stationName);\n            if (stationIndex > 0) {\n                return normalizedServedStations[stationIndex - 1].name;\n            }\n            return schedule.departureStation;\n        }\n    } catch (error) {\n        console.error('Erreur lors de la récupération de la destination/provenance:', error);\n        return '';\n    }\n};\n// Fonction pour formater les jours de circulation\nconst formatOperatingDays = (schedule)=>{\n    if (!(schedule === null || schedule === void 0 ? void 0 : schedule.joursCirculation) || schedule.joursCirculation.length === 0) {\n        return 'Tous les jours';\n    }\n    try {\n        const days = {\n            'Monday': 'Lun',\n            'Tuesday': 'Mar',\n            'Wednesday': 'Mer',\n            'Thursday': 'Jeu',\n            'Friday': 'Ven',\n            'Saturday': 'Sam',\n            'Sunday': 'Dim'\n        };\n        return schedule.joursCirculation.map((day)=>days[day] || day).join(', ');\n    } catch (error) {\n        console.error('Erreur lors du formatage des jours:', error);\n        return 'Tous les jours';\n    }\n};\n// Fonction pour trier les horaires par heure\nconst sortSchedulesByTime = function(schedules, stationName) {\n    let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'departures';\n    if (!schedules || !stationName) return [];\n    try {\n        return [\n            ...schedules\n        ].sort((a, b)=>{\n            const timeA = getStationTime(a, stationName, type === 'departures' ? 'departure' : 'arrival') || '';\n            const timeB = getStationTime(b, stationName, type === 'departures' ? 'departure' : 'arrival') || '';\n            return timeA.localeCompare(timeB);\n        });\n    } catch (error) {\n        console.error('Erreur lors du tri des horaires:', error);\n        return schedules;\n    }\n};\n// Fonction pour mettre à jour un horaire existant dans localStorage\nconst updateSchedule = (id, updatedSchedule)=>{\n    if (false) {}\n    const schedules = JSON.parse(localStorage.getItem('schedules') || '[]');\n    const index = schedules.findIndex((schedule)=>schedule.id === id);\n    if (index !== -1) {\n        schedules[index] = {\n            ...schedules[index],\n            ...updatedSchedule,\n            id\n        };\n        localStorage.setItem('schedules', JSON.stringify(schedules));\n    } else {\n        console.warn(\"Schedule with id \".concat(id, \" not found for update.\"));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/scheduleUtils.js\n"));

/***/ })

});